// Generated by Copilot
import { ChangeEvent, FC, useState } from 'react';

interface ImageUploadControlProps {
  label?: string;
  value?: string;
  onChange?: (file: File | null) => void;
  className?: string;
  accept?: string;
  placeholder?: string;
}

const ImageUploadPreviewControl: FC<ImageUploadControlProps> = ({
  label = 'Image',
  value,
  onChange,
  className = '',
  accept = 'image/*',
  placeholder = 'No image selected',
}) => {
  const [imagePreview, setImagePreview] = useState<string | null>(
    value || null,
  );
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);

      // Create preview URL
      const reader = new FileReader();
      reader.onload = (event) => {
        const result = event.target?.result as string;
        setImagePreview(result);
      };
      reader.readAsDataURL(file);

      onChange?.(file);
    }
  };

  const removeImage = () => {
    setSelectedFile(null);
    setImagePreview(null);
    onChange?.(null);

    // Reset file input
    const fileInput = document.getElementById(
      `image-input-${label}`,
    ) as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
    }
  };

  return (
    <div className={`form-control w-full ${className}`}>
      <label className="label">
        <span className="label-text">{label}</span>
      </label>

      <input
        id={`image-input-${label}`}
        type="file"
        accept={accept}
        className="file-input file-input-bordered mb-4 w-full"
        onChange={handleImageChange}
      />

      <div className="avatar">
        <div className="relative w-60 rounded">
          {imagePreview ? (
            <>
              <img
                src={imagePreview}
                alt="Preview"
                className="h-full w-full object-cover"
              />
              <button
                type="button"
                className="btn btn-circle btn-sm btn-error absolute top-2 right-2"
                onClick={removeImage}
              >
                Ã—
              </button>
            </>
          ) : (
            <div className="bg-base-200 flex h-60 w-full items-center justify-center rounded">
              <div className="text-center">
                <svg
                  className="text-base-content/50 mx-auto h-12 w-12"
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 48 48"
                >
                  <path
                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                    strokeWidth={2}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <p className="text-base-content/50 mt-2 text-sm">
                  {placeholder}
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ImageUploadPreviewControl;
