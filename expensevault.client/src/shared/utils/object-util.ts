// Generated by Copilot
import { lensProp, set } from 'ramda';

export const updatePartialObject = <T extends object>(
  target: T,
  source: Partial<T>,
): T => {
  if (
    typeof target !== 'object' ||
    target === null ||
    typeof source !== 'object' ||
    source === null
  ) {
    throw new TypeError('Both target and source must be non-null objects');
  }

  let result = target;

  Object.keys(source).forEach((key) => {
    const typedKey = key as keyof T;
    const xLens = lensProp<T>(typedKey);
    result = set(xLens, source[typedKey] as T[typeof typedKey], result);
  });

  return result;
};
